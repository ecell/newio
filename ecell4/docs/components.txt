=========================
コンポーネント
=========================

ecell4 パッケージで定義されている多くのデータエンティティは、コンポー
ネントと呼ばれるクラスのサブクラスとして定義されています。コンポーネン
トは、インスタンスごとに固有の名前を持ち、メタデータ保存のためのデータ
グループを備えます。

開発者は、コンポーネントクラスを拡張することで、任意のデータエンティティ
を新たに定義でき、同時にデータエンティティに対応する HDF5 の保存・復元
アルゴリズムを実装できます。

コンポーネントは、それ自体を HDF5 のトップレベルエンティティとしてファ
イルに保存できますし、 HDF5 のデータ階層中の一つのデータグループとして
も保存できます。そのため、あるデータエンティティを、将来別の大きな枠組
のデータフォーマット中のサブノードとしてそのまま組み込めます。

ecell4 パッケージは、 Framework, Simulator, World, Space, Model といっ
た標準のデータエンティティ階層に対応したコンポーネントを定義しています。


使い方
============

コンポーネントインスタンスを生成するには、クラスのコンストラクタを呼び
出します。第一引数はコンポーネントにつける名前で、省略可能です。::

    # frobnicate Component.
    >>> c = Component('foo')
    >>> c.name
    'foo'

コンポーネントインスタンスをファイルに保存するには、 ``save()`` メソッ
ドを呼びます。save() メソッドは、 ``h5py.File`` ファイルインスタンスを
使ってデータを保存し、開いた状態のファイルインスタンスを返します。::

    # saving
    >>> saved = c.save('foo.hdf5')
    >>> saved
    <HDF5 file "..." (mode ...)>

コンポーネントをHDF5に保存すると、トップレベルノードのアトリビュートに、
アプリケーション名とデータタイプが記録されます。::

    >>> saved.attrs['application'], saved.attrs['format']
    ('ecell4', 'component')

将来の拡張のために、バージョンも記録されています。::

    >>> saved.attrs['version']
    array([0, 0, 0])

特に仕様化されていない雑多な付加情報を保存するために、 ``metadata`` と
呼ばれるデータグループが存在します。::

    >>> sorted(saved)
    [u'metadata']
    >>> saved['metadata']
    <HDF5 group "/metadata" (0 members)>

保存されたファイルからデータをロードするには、 ``load()`` メソッドを使
います。 ``load()`` メソッドは、ファイルから読みだしたデータで、現在の
インスタンスの内容を **上書き** します。::

    >>> loaded = c.load('foo.hdf5')
    >>> loaded
    <HDF5 file "..." (mode r+)>

ファイルから、新たなインスタンスを直接生成するには、 ``Load()`` クラス
メソッドを使います。::

    >>> loaded = Component.Load('foo.hdf5')
    >>> loaded
    <HDF5 file "..." (mode r+)>


Component クラスを拡張する
=======================================

Component クラスやそのサブクラスを拡張して、固有の HDF5 データを保存し
たいときには、 ``load()`` と ``save()`` メソッドを実装する必要がありま
す。 ``load()`` はデータの読み出し、 ``save()`` はデータの書き込みに対
応しています。これらのメソッドを拡張するときには、 
**必ずスーパークラスのメソッドを呼び出して戻り値を取得し、** その戻り
値を保存対象のデータグループとして操作し、最後に
**戻り値としてデータグループを返してください。** ::

  class MyComponent(Component):
      ...
      def load(self, ...):
          # スーパークラスの load() からデータグループを得る
          data_root = super(MyComponent, self).load(...)
          # data_root を操作して、固有のデータを保存する
          return data_root # 保存済みのデータグループを返す


``load()`` メソッド
=========================

``load(self, hdf5_or_filename, strict_version)`` 

``laod()`` メソッドは、インスタンスへのデータのロードを行います。
``hdf5_or_filename`` は、文字列または ``h5py.File`` インスタンスです。
文字列を指定すると、パス名として扱います。 ``Component`` クラスの
``load()`` は、 ``h5py.Group`` またはそのサブクラスのインスタンスを返
します。 ``strict_version`` はデータのバージョンチェックのための引数で
すが、現時点の実装では使われていません。
``hdf5_or_filename`` に指定したパスが存在しなければ ``IOError`` 例外を
送出します。


``save()`` メソッド
=========================

``save(self, hdf5_or_filename, strict_version)`` 

``save()`` メソッドは、インスタンスへのデータの保存を行います。
``hdf5_or_filename`` は、文字列または ``h5py.File`` インスタンスです。
文字列を指定すると、パス名として扱います。 ``Component`` クラスの
``save()`` は、 ``h5py.Group`` またはそのサブクラスのインスタンスを返
します。 ``strict_version`` はデータのバージョンチェックのための引数で
すが、現時点の実装では使われていません。




